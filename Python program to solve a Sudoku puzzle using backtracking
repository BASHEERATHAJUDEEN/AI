Write a Python program to solve a Sudoku puzzle using backtracking. Given a 9x9 grid 
with some cells pre-filled, your program should find a solution that satisfies the 
following constraints:
Each row must contain the numbers 1–9 with no duplicates.
Each column must contain the numbers 1–9 with no duplicates.
Each of the 3x3 sub-grids must contain the numbers 1–9 with no duplicates.
Input:
An incomplete 9x9 Sudoku grid with 0 representing empty cells.
Output:
A completed grid satisfying all constraints.


def print_board(board):
    """Pretty print the Sudoku board"""
    for i in range(9):
        for j in range(9):
            print(board[i][j], end=' ')
        print()

def find_empty(board):
    """Find the next empty cell (denoted by 0)"""
    for row in range(9):
        for col in range(9):
            if board[row][col] == 0:
                return row, col  # Return position of empty cell
    return None  # No empty cells left

def is_valid(board, row, col, num):
    """Check if placing num in board[row][col] is valid"""
    
    # Check row
    if num in board[row]:
        return False

    # Check column
    if num in [board[i][col] for i in range(9)]:
        return False

    # Check 3x3 subgrid
    start_row = (row // 3) * 3
    start_col = (col // 3) * 3
    for i in range(3):
        for j in range(3):
            if board[start_row + i][start_col + j] == num:
                return False

    return True

def solve_sudoku(board):
    """Recursive backtracking algorithm to solve Sudoku"""
    empty = find_empty(board)
    if not empty:
        return True  # Solved

    row, col = empty

    for num in range(1, 10):
        if is_valid(board, row, col, num):
            board[row][col] = num  # Try this number

            if solve_sudoku(board):
                return True  # Success

            board[row][col] = 0  # Backtrack

    return False  # Trigger backtracking

# Example Sudoku Puzzle (0 = empty cells)
sudoku_board = [
    [5, 3, 0, 0, 7, 0, 0, 0, 0],
    [6, 0, 0, 1, 9, 5, 0, 0, 0],
    [0, 9, 8, 0, 0, 0, 0, 6, 0],

    [8, 0, 0, 0, 6, 0, 0, 0, 3],
    [4, 0, 0, 8, 0, 3, 0, 0, 1],
    [7, 0, 0, 0, 2, 0, 0, 0, 6],

    [0, 6, 0, 0, 0, 0, 2, 8, 0],
    [0, 0, 0, 4, 1, 9, 0, 0, 5],
    [0, 0, 0, 0, 8, 0, 0, 7, 9]
]

# Solve and print result
if solve_sudoku(sudoku_board):
    print("✅ Sudoku solved:")
    print_board(sudoku_board)
else:
    print("❌ No solution exists.")

